/* ********************************************//
 CREATE APP

 npx create-react-app  [projectName]
 cd [projectName]

npm start
*/ *********************************************//


//*********************************************//
// BOOTSTRAP
// <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
//*********************************************//

//*********************************************//
// RESTORE NODE_MODULES
// npm install
//*********************************************//


//*********************************************//
// CLASS COMPONENT
//*********************************************//
import React from 'react';
import React, { Component } from 'react';
import '../App.css';
import '../Style.css';

class Title extends Component {
    render() {
      return <h1 className="App" >Hello Dojo!</h1>;
    }
  }

  export default Title;

//*********************************************//
// CLASS COMPONENT - PERSON
//*********************************************//
import React, { Component } from 'react';
import '../App.css';
import '../Style.css';

class Person extends Component {
    render() {
        const {first, last, age, hair} = this.props;
        return (
            <div className = 'cont'>
                <h2>{last}, {first} </h2>
                <p> Age: {age}</p>
                <p> Hair Color: {hair}</p>
            </div>
        );
    }
}

export default Person;

//*********************************************//
// FUNCTIONAL COMPONENT - with state
//*********************************************//
import React from 'react';
import '../App.css';
import '../Style.css';
import styles from '../Modules/Tabs.module.css';

const Tabs = props => {
    const {state}  = props;


    return (
        <div className = {styles.bgColor} >
            <h2>Hello World! {state} </h2>
        </div>
    );   
}
export default Tabs;
//*********************************************//
// IMPORT COMPONENT INTO  APP.JS
//*********************************************//
  import Title from './components/Title';


//*********************************************//
// MODULAR STYLES
// Located with the component it is affecting
//*********************************************//
import styles from '../Modules/Advertisement.module.css';

<div className={styles.bgColor}></div>


//*********************************************//
// STATE TRICKLE DOWN FROM APP TO CHILDREN
//*********************************************//

import './App.css';
import UserForm from './components/UserForm.jsx';
import Results from './components/Results.jsx';
import React, { useState } from 'react';

function App() {
  
  const [state, setState] = useState({
    first: "",
    last: "",
  
  });

  return (
    <div className="App">
      <UserForm inputs = {state} setInput = {setState} />
      <Results data ={state} />
    </div>
  );
}

export default App;

//*********************************************//
// COMPONENTS - FORM - STATE - ON CHANGE
//*********************************************//
import React, { useState } from  'react';
import styles from '../Modules/UserForm.module.css';  
    
const UserForm = (props) => {
    const {inputs, setInput} = props;  
    
    const onChange = e => {
        setInput({
            ...inputs,
            [e.target.name]: e.target.value
        });
    };
    
    return(
        <div className={styles.text}>
        <form>
            <div>
                <label htmlFor="first">First Name: </label> 
                <input onChange={onChange} type="text" name="first"/>
            </div>
            <div>
                <label htmlFor="last">last Name: </label> 
                <input onChange={onChange} type="text" name="last"/>
            </div>
            <div>
                <label htmlFor="email">email: </label> 
                <input onChange={onChange} type="text" name="email"/>
            </div>
            <div>
                <label htmlFor="pass">password: </label> 
                <input onChange={onChange} type="text" name="pass"/>
            </div>
            <div>
                <label htmlFor="confirm">confirm: </label> 
                <input onChange={onChange} type="text" name="confirm"/>
            </div>
        </form>
        </div>
    );
};
    
export default UserForm;

//*********************************************//
// IMPORT PROPS FROM PARENT (APP)
//*********************************************//
	//STATE === AN OBJECT---> {}  --> an OBJECTS
    const {inputs, setInput} = props; 
    //STATE === AN ARRAY ---> [{}]  --> an ARRAY of OBJECTS [hard coded first entry]
    const [state, setState] = useState([{color: "red", width: "124"}]);

    //props.[box] extracts all the elements in box
    // making it so you do not have to reach into props
    // to get the box attributes
    // OTHERWISE to access box elements you still have to do
    // props.box.color
    
    const box = props.box;

//*********************************************//
// ON PAGE VALIDATIONS
//*********************************************//
{ inputs.first.length < 2 && inputs.first.length > 0 ? <p style={{color:'red'}}> First Name must be at least 2 characters </p> : <p></p>}


//*********************************************//
// INLINE STYLING
//*********************************************//
 <div style={boxStyle}></div>

//*********************************************//
// [CHILD] CALLS A GRANDCHILD COMPONENT <Box />
//*********************************************//

//state.map accepts a FUNCTION
 return (
            //iterating through an array of objects extracting BOX objects
        <div style ={boxes}>
            {
                state.map((box, i) => {
                    return <Box box={box} key={i} />
                    }
                )
            }   
        </div>
    ) 
//*********************************************//
// IMPORTING 2 VARIABLES FROM PARENT THRHOUG PROPS
// Use { state, set State}
// Props turned values into a single object
// this object contains an array of objects
// and a function setState()
//*********************************************//
    const {state, setState} = props;  
   
    const submit = e => {
        e.preventDefault();
        //because state is an array of [objects] we need to format setState() to modify an array of objects
        // setState ([...state {}])
        // [...state] imports all previous [objects] from array into this new array setState([]); 
        setState([...state, { color: e.target.color.value, width: e.target.width.value }])
        e.target.color.value = '';
        e.target.width.value = '';
    };

//*********************************************//
// USEEffect with Axios.API
// *use effect is only happy using props as variables*
//*********************************************//
import axios from 'axios';

    const [pokeList, setPokeList] = useState([]);

    useEffect(() => {
        axios.get('https://pokeapi.co/api/v2/pokemon?limit=807')
                .then(response => {setPokeList(response.data.results)})
           
    }, []);

//*********************************************//
// Install AXIOS
//*********************************************//
npm install axios

//*********************************************//
// Install REACH ROUTER
//*********************************************//
npm install @reach/router

//*********************************************//
// ROUTERS W PARAMETERS
//*********************************************//
import React from 'react';
import { Router } from '@reach/router';
function App() {
  return (
    <div className="App">
        <Router>
            <PageOne path="/login"/>
            <PageTwo path="/dashboard"/>
            <PageThree path ="/dogs/:id"/>
        </Router>
    </div>
  );
}
export default App;

//*********************************************//
// LINKS AND NAVIGATE IN ROUTERS
//*********************************************//
import React from 'react';
import { Link, navigate } from '@reach/router';
const NavBar = (props) => {

const clickHandler = (e) => {
	e.preventDefault();
	navigate('/dashboard')
}
  return (
      <div>
        <Link to = "/dashboard">Dashboard</Link>
        <button onClick = {clickHandler} >Navigate</button>
      </div>
  );
}
//*********************************************//
// LINKS AND NAVIGATE WITH VARIABLES
// props.id to pull value from URL
//*********************************************//
 <Link to = {`/planets/${homeID}/`} >{home.name}</Link>
 state.type ==='people' ? navigate("/people/"+ state.id) : navigate("/planets/"+ state.id)

//*********************************************//
// SLICING STRINGS
//*********************************************//
 setHomeID(homeworldUrl.slice(29,-1))

//*********************************************//
// INSTALL PROJECT JSON ( if not used create react app)
npm init -y

//*********************************************//

//*********************************************//
// INSTALL EXPRESS
//*********************************************//
npm i express

//*********************************************//
// INSTALL FAKER
//*********************************************//
npm i faker

//*********************************************//
// INSTALL MONGOOSE
//*********************************************//
npm install mongoose express

//*********************************************//
// FIX NODEMON
//*********************************************//
Set-ExecutionPolicy -Scope Process -ExecutionPolicy Bypass

//*********************************************//
// BOOT MONGO SERVER
//*********************************************//
cd D:\MongoDB\Server\4.4\bin
mongo.exe

//*********************************************//
// MONGO COMMANDS
//*********************************************//
[show databases]
show dbs

[select database]
use DB_TO_SELECT

[drop database]
use DB_TO_DROP
db.dropDatabase()

[create database]
use DB_TO_CREATE

[make collection *note single quotes* ]
db.createCollections('COLLECTION_NAME') 

[drop collection]
db.COLLECTION_NAME.drop()

[show collections - aka tables] 
show collections

[insert doc(json object aka  rows) into database]
db.COLLECTION_NAME.insert({name: "Kristen"})

[query entire collection]
db.COLLECTION_NAME.find()
db.COLLECTION_NAME.find().pretty()

[query by key value pairs - all in collection with name Kristen AND age: 24]
db.COLLECTION_NAME.find({name: "Kristen", age: 24}).pretty()

[query by id]
db.COLLECTION_NAME.find({_id: ObjectId("................................."})

[remove ALL items from collection that match]
db.COLLECTION_NAME.remove({name: "Kristen", age: 24})

[remove ONE item from collection that matches]
db.COLLECTION_NAME.remove({name: "Kristen", age:24}, true)

[update - OVERRIDE all fields in collection and REPLACE. (like setSTATE)]
db.COLLECTION_NAME.update({name: "Kristen"},{location: California})

[update - ADD field to item in collection]
db.COLLECTION_NAME.update({name: "Kristen"},{$set: {location: California}})

[update - MANY and AND]
db.COLLECTION_NAME.updateMany({},{$set: {interests: ['coding','brunch','mongo']}})

[ADD CURRENT TIME]
> db.COLLECTION_NAME.updateMany({},{$set: {created_on: '$$NOW'}})

//*********************************************//
// MONGO QUERY OPERATIONS
// $gte
// $lt
// $lte

//*********************************************//
[greater than]
db.COLLECTION_NAME.find({number_of_students: {$gt: 15}})

//ARRAYS
// $in - return list of objects who have value in their array

[query where homestate either CA or WA]
 db.students.find({home_state: {$in: ['CA','WA']}})

[query where fields are between two values]
 > db.students.find({lucky_number: {$gte:1, $lte: 9}})

entry
[PUSH or ADD TO SETto array]
db.COLLECTION_NAME.update({_id: ObjectId("5463d871a6a96d5ed6252f4d")}, {$push: {interests: 'snowboarding'}})
// $addToSet - add only if it will be unique 

[POP first or last value from array 1 = first (last in)]
db.COLLECTION.update({QUERY}, {$pop: {array_key: (1 or -1)}})

[REMOVE value from array based on key]
db.COLLECTION.update({QUERY}, {$pull: {array_key: VALUE}})




//*********************************************//
// START APP
// npm run start
// START SERVER
// nodemon server.js
//*********************************************//


//*********************************************//
// FORM SUBMIT HANDLER with validations CREATE
// IN FORM    { e=> {submitHandler( e, {price, title, description}}
//*********************************************//
const [empty] = useState({
    title: "",
    price: "",
    description: "",
    unique: "",
})

const [errors, setErrors] = useState(empty)

     const submitHandler = (e, data) => {
        e.preventDefault();
        

        axios.post("http://localhost:8000/products/new", data)
        .then(res=>{
            // Errors exist
            console.log(res.data)
            if(res.data.error !== undefined){
                if(res.data.error.errors !== undefined){
                console.log("ERRORS FOUND")

                let err = res.data.error.errors;
                let price = err.price !== undefined ? err.price.message: "";
                let title = err.title !== undefined ? err.title.message: "";
                let description = err.description !== undefined ? err.description.message: "";
                setErrors({
                    title: title,
                    price: price,
                    description: description,
                    unique:"",
                })

            } else if(res.data.error === "Product Exists"){
                setErrors({unique: "This product exists"})

            }
        // No errors exist
        } else {
                console.log("NO EERORS")
                setErrors({...empty});
                props.updateView === false ? props.setUpdateView(true) : props.setUpdateView(false)
        }})
        .catch(err=>console.log(err))

    }

//*********************************************//
// FORM SUBMIT HANDLER with validations UPDATE
//*********************************************//
   const [title, setTitle] = useState("");
    const [price, setPrice] = useState("");
    const [description, setDescription] = useState(""); 
    const [loaded, setLoaded] = useState(false) 

    const [empty] = useState({
        title: "",
        price: "",
        description: "",
    })

    const [errors, setErrors] = useState(empty)


    useEffect(()=> {
            axios.get("http://localhost:8000/products/"+ props.id)
            .then(res=> {
                console.log(res.data)
                setTitle(res.data.product.title);
                setPrice(res.data.product.price);
                setDescription(res.data.product.description);
                setLoaded(true)
            })
            .catch(err=>console.log(err))
        }
    ,[])


    const submitHandler = (e,data) => {
        e.preventDefault();

        axios.put("http://localhost:8000/products/"+ props.id +"/edit", data)
        .then(res=>{
            // Errors exist
            console.log(res.data)
            if(res.data.error !== undefined){
                if(res.data.error.errors !== undefined){
                console.log("ERRORS FOUND")

                let err = res.data.error.errors;
                let price = err.price !== undefined ? err.price.message: "";
                let title = err.title !== undefined ? err.title.message: "";
                let description = err.description !== undefined ? err.description.message: "";
                setErrors({
                    title: title,
                    price: price,
                    description: description,
                    unique:"",
                })

            } else if(res.data.error === "Product Exists"){
                setErrors({unique: "This product exists"})

            }
        // No errors exist
        } else {
                console.log("no errors")
                setErrors({...empty});
                navigate('/')
        }})
        .catch(err=>console.log(err))

    }


//*********************************************//
// CONTROLLER UPDATE UNIQUE
//*********************************************//
module.exports.updateUniqueExistingProduct = (req, res) => {
  Product.exists({title:  req.body.title})
  .then(productExists => {
    if(productExists) {
      Product.findOne({title: req.body.title})
      .then(foundProduct => {
        console.log(req.params.id)
        console.log(foundProduct._id)
        if(req.params.id != foundProduct._id){
          console.log("Not same product")
          return Promise.reject("Product Exists")
        }
        return  Product.findOneAndUpdate({ _id: req.params.id }, req.body, { new: true, runValidators: true })  
      }).catch(err => res.json({ message: "Something went wrong", error: err }));
    } else {
    return  Product.findOneAndUpdate({ _id: req.params.id }, req.body, { new: true, runValidators: true })
  }})
  .catch(err => res.json({ message: "Something went wrong", error: err }));
};

//*********************************************//
// CONTROLLER CREATE UNIQUE
//*********************************************//

module.exports.createUniqueProduct = (req, res) => {
  Product.exists({title:  req.body.title})
    .then(productExits => {
      if(productExits) {
        return Promise.reject("Product Exists")
      } 
      return Product.create(req.body).then(s=> res.json({success: true}))
    })
    .catch(err => res.json({ message: "Something went wrong", error: err }));
};